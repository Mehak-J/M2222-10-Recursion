 

// ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩  ⇩
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
let n = 7
// DO NOT ALTER THE TEXT BETWEEN THESE LINES =========={M{E{R{L{I{N{1}N}I}L}R}E}M}=====================================
// ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧  ⇧


// Add your code below:
func factorial(n:Int) -> Int {
    print("Calculating factorial(\(n))...")
    if n <= 1 {
        print("Terminal case, returning 1.")
        return 1
        
    }
    else {
        let v = n * factorial(n:n-1)
        print("Non-terminal case, returning \(v).")
        return v
    }
    print("The final result is \(factorial(n:n)).")



}



/*
func factorial(n: Int) -> Int {
    if n == 0 {
        print("Terminal case, returning 1.")
         return 1
    }
    else {
        print("Calculating factorial(\(n))...")
        return n * factorial(n: n - 1)
    }
  
}
let number = n
let result = factorial(n: number) 

if n > 1 {
    var cnt = n
    var one = 1
    var two = 2
    var result = 0
    while cnt > 1 {
        result = one*two
        print("Non-terminal case, returning \(result).")
        cnt -= 1
        two += 1
        one = result
        
        
    }
    print("The final result is: \(result).")

    }
  */  
 



